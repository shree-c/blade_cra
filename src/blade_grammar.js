export default  /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
  (function () {
    "use strict"

    function peg$subclass(child, parent) {
      function ctor() { this.constructor = child }
      ctor.prototype = parent.prototype
      child.prototype = new ctor()
    }

    function peg$SyntaxError(message, expected, found, location) {
      this.message = message
      this.expected = expected
      this.found = found
      this.location = location
      this.name = "SyntaxError"

      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError)
      }
    }

    peg$subclass(peg$SyntaxError, Error)

    peg$SyntaxError.buildMessage = function (expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
          return "\"" + literalEscape(expectation.text) + "\""
        },

        "class": function (expectation) {
          var escapedParts = "",
            i

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i])
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]"
        },

        any: function (expectation) {
          return "any character"
        },

        end: function (expectation) {
          return "end of input"
        },

        other: function (expectation) {
          return expectation.description
        }
      }

      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase()
      }

      function literalEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/"/g, '\\"')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
      }

      function classEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/\]/g, '\\]')
          .replace(/\^/g, '\\^')
          .replace(/-/g, '\\-')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
      }

      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
      }

      function describeExpected(expected) {
        var descriptions = new Array(expected.length),
          i, j

        for (i = 0; i < expected.length; i++) {
          descriptions[i] = describeExpectation(expected[i])
        }

        descriptions.sort()

        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i]
              j++
            }
          }
          descriptions.length = j
        }

        switch (descriptions.length) {
          case 1:
            return descriptions[0]

          case 2:
            return descriptions[0] + " or " + descriptions[1]

          default:
            return descriptions.slice(0, -1).join(", ")
              + ", or "
              + descriptions[descriptions.length - 1]
        }
      }

      function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input"
      }

      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found."
    }

    function peg$parse(input, options) {
      options = options !== void 0 ? options : {}

      var peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction = peg$parsestart,

        peg$c0 = function (content, rest_block) {
          return [
            content,
            ...rest_block
          ]
        },
        peg$c1 = function (block) {
          return block
        },
        peg$c2 = peg$otherExpectation("block"),
        peg$c3 = function (tag, style_info, body) {
          return {
            tag,
            style_info,
            body
          }
        },
        peg$c4 = "(",
        peg$c5 = peg$literalExpectation("(", false),
        peg$c6 = ")",
        peg$c7 = peg$literalExpectation(")", false),
        peg$c8 = function (tag) {
          return tag
        },
        peg$c9 = "[",
        peg$c10 = peg$literalExpectation("[", false),
        peg$c11 = "]",
        peg$c12 = peg$literalExpectation("]", false),
        peg$c13 = function (kv_pair) {
          return [...kv_pair]
        },
        peg$c14 = ":",
        peg$c15 = peg$literalExpectation(":", false),
        peg$c16 = function (key, value) {
          return { [key]: value }
        },
        peg$c17 = "font-size",
        peg$c18 = peg$literalExpectation("font-size", false),
        peg$c19 = "medium",
        peg$c20 = peg$literalExpectation("medium", false),
        peg$c21 = "small",
        peg$c22 = peg$literalExpectation("small", false),
        peg$c23 = "large",
        peg$c24 = peg$literalExpectation("large", false),
        peg$c25 = "{",
        peg$c26 = peg$literalExpectation("{", false),
        peg$c27 = "}",
        peg$c28 = peg$literalExpectation("}", false),
        peg$c29 = function (document) {
          return document
        },
        peg$c30 = function (start_word, rest_words) {
          return [start_word, ...rest_words].join(' ')
        },
        peg$c31 = function (word) {
          return word
        },
        peg$c32 = function (letter) {
          return letter.join('')
        },
        peg$c33 = /^[a-z]/,
        peg$c34 = peg$classExpectation([["a", "z"]], false, false),
        peg$c35 = /^[A-Z]/,
        peg$c36 = peg$classExpectation([["A", "Z"]], false, false),
        peg$c37 = /^[0-9]/,
        peg$c38 = peg$classExpectation([["0", "9"]], false, false),
        peg$c39 = "\\{",
        peg$c40 = peg$literalExpectation("\\{", false),
        peg$c41 = "\\}",
        peg$c42 = peg$literalExpectation("\\}", false),
        peg$c43 = "\\(",
        peg$c44 = peg$literalExpectation("\\(", false),
        peg$c45 = "\\)",
        peg$c46 = peg$literalExpectation("\\)", false),
        peg$c47 = "\\[",
        peg$c48 = peg$literalExpectation("\\[", false),
        peg$c49 = "\\]",
        peg$c50 = peg$literalExpectation("\\]", false),
        peg$c51 = "p",
        peg$c52 = peg$literalExpectation("p", false),
        peg$c53 = "h1",
        peg$c54 = peg$literalExpectation("h1", false),
        peg$c55 = "h2",
        peg$c56 = peg$literalExpectation("h2", false),
        peg$c57 = "h3",
        peg$c58 = peg$literalExpectation("h3", false),
        peg$c59 = "h4",
        peg$c60 = peg$literalExpectation("h4", false),
        peg$c61 = "h5",
        peg$c62 = peg$literalExpectation("h5", false),
        peg$c63 = "h6",
        peg$c64 = peg$literalExpectation("h6", false),
        peg$c65 = "i",
        peg$c66 = peg$literalExpectation("i", false),
        peg$c67 = "ul",
        peg$c68 = peg$literalExpectation("ul", false),
        peg$c69 = "li",
        peg$c70 = peg$literalExpectation("li", false),
        peg$c71 = "div",
        peg$c72 = peg$literalExpectation("div", false),
        peg$c73 = "em",
        peg$c74 = peg$literalExpectation("em", false),
        peg$c75 = " ",
        peg$c76 = peg$literalExpectation(" ", false),
        peg$c77 = "\n",
        peg$c78 = peg$literalExpectation("\n", false),
        peg$c79 = ";",
        peg$c80 = peg$literalExpectation(";", false),

        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{ line: 1, column: 1 }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,

        peg$result

      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error("Can't start parsing from rule \"" + options.startRule + "\".")
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
      }

      function text() {
        return input.substring(peg$savedPos, peg$currPos)
      }

      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos)
      }

      function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location
        )
      }

      function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildSimpleError(message, location)
      }

      function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase }
      }

      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase }
      }

      function peg$anyExpectation() {
        return { type: "any" }
      }

      function peg$endExpectation() {
        return { type: "end" }
      }

      function peg$otherExpectation(description) {
        return { type: "other", description: description }
      }

      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p

        if (details) {
          return details
        } else {
          p = pos - 1
          while (!peg$posDetailsCache[p]) {
            p--
          }

          details = peg$posDetailsCache[p]
          details = {
            line: details.line,
            column: details.column
          }

          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++
              details.column = 1
            } else {
              details.column++
            }

            p++
          }

          peg$posDetailsCache[pos] = details
          return details
        }
      }

      function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos)

        return {
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          }
        }
      }

      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) { return }

        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos
          peg$maxFailExpected = []
        }

        peg$maxFailExpected.push(expected)
      }

      function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location)
      }

      function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected, found),
          expected,
          found,
          location
        )
      }

      function peg$parsestart() {
        var s0

        s0 = peg$parsedocument()

        return s0
      }

      function peg$parsedocument() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = []
        s2 = peg$parseall_delimitor()
        while (s2 !== peg$FAILED) {
          s1.push(s2)
          s2 = peg$parseall_delimitor()
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseblock()
          if (s2 !== peg$FAILED) {
            s3 = []
            s4 = peg$parserest_block()
            while (s4 !== peg$FAILED) {
              s3.push(s4)
              s4 = peg$parserest_block()
            }
            if (s3 !== peg$FAILED) {
              s4 = []
              s5 = peg$parseall_delimitor()
              while (s5 !== peg$FAILED) {
                s4.push(s5)
                s5 = peg$parseall_delimitor()
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c0(s2, s3)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
          s0 = []
          s1 = peg$parseall_delimitor()
          while (s1 !== peg$FAILED) {
            s0.push(s1)
            s1 = peg$parseall_delimitor()
          }
        }

        return s0
      }

      function peg$parserest_block() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = []
        s2 = peg$parseall_delimitor()
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2)
            s2 = peg$parseall_delimitor()
          }
        } else {
          s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseblock()
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c1(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseblock() {
        var s0, s1

        peg$silentFails++
        s0 = peg$currPos
        s1 = peg$parsewith_style_block()
        if (s1 === peg$FAILED) {
          s1 = peg$parsesentence()
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c1(s1)
        }
        s0 = s1
        peg$silentFails--
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c2) }
        }

        return s0
      }

      function peg$parsewith_style_block() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parsetagname()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parseall_delimitor()
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$parseall_delimitor()
          }
          if (s2 !== peg$FAILED) {
            s3 = []
            s4 = peg$parsestyle_block()
            while (s4 !== peg$FAILED) {
              s3.push(s4)
              s4 = peg$parsestyle_block()
            }
            if (s3 !== peg$FAILED) {
              s4 = []
              s5 = peg$parseall_delimitor()
              while (s5 !== peg$FAILED) {
                s4.push(s5)
                s5 = peg$parseall_delimitor()
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsebody()
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c3(s1, s3, s5)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parsetagname() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c4
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c5) }
        }
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parseall_delimitor()
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$parseall_delimitor()
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetag()
            if (s3 !== peg$FAILED) {
              s4 = []
              s5 = peg$parseall_delimitor()
              while (s5 !== peg$FAILED) {
                s4.push(s5)
                s5 = peg$parseall_delimitor()
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c6
                  peg$currPos++
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c7) }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c8(s3)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parsestyle_block() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c9
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c10) }
        }
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parseall_delimitor()
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$parseall_delimitor()
          }
          if (s2 !== peg$FAILED) {
            s3 = []
            s4 = peg$parsekv_pair()
            while (s4 !== peg$FAILED) {
              s3.push(s4)
              s4 = peg$parsekv_pair()
            }
            if (s3 !== peg$FAILED) {
              s4 = []
              s5 = peg$parseall_delimitor()
              while (s5 !== peg$FAILED) {
                s4.push(s5)
                s5 = peg$parseall_delimitor()
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c11
                  peg$currPos++
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c12) }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c13(s3)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parsekv_pair() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        s1 = peg$parsekey()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parsespace_delimitor()
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$parsespace_delimitor()
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c14
              peg$currPos++
            } else {
              s3 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c15) }
            }
            if (s3 !== peg$FAILED) {
              s4 = []
              s5 = peg$parsespace_delimitor()
              while (s5 !== peg$FAILED) {
                s4.push(s5)
                s5 = peg$parsespace_delimitor()
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsevalue()
                if (s5 !== peg$FAILED) {
                  s6 = []
                  s7 = peg$parsespace_delimitor()
                  while (s7 !== peg$FAILED) {
                    s6.push(s7)
                    s7 = peg$parsespace_delimitor()
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsesemicolon()
                    if (s7 !== peg$FAILED) {
                      s8 = []
                      s9 = peg$parseall_delimitor()
                      while (s9 !== peg$FAILED) {
                        s8.push(s9)
                        s9 = peg$parseall_delimitor()
                      }
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c16(s1, s5)
                        s0 = s1
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parsekey() {
        var s0

        if (input.substr(peg$currPos, 9) === peg$c17) {
          s0 = peg$c17
          peg$currPos += 9
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c18) }
        }

        return s0
      }

      function peg$parsevalue() {
        var s0

        if (input.substr(peg$currPos, 6) === peg$c19) {
          s0 = peg$c19
          peg$currPos += 6
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c20) }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c21) {
            s0 = peg$c21
            peg$currPos += 5
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c22) }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c23) {
              s0 = peg$c23
              peg$currPos += 5
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c24) }
            }
          }
        }

        return s0
      }

      function peg$parsebody() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c25
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c26) }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedocument()
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c27
              peg$currPos++
            } else {
              s3 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c28) }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c29(s2)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parsesentence() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        s1 = peg$parseword()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$parserest_words()
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$parserest_words()
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesemicolon()
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c30(s1, s2)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parserest_words() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = []
        s2 = peg$parseall_delimitor()
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2)
            s2 = peg$parseall_delimitor()
          }
        } else {
          s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseword()
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c31(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseword() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = []
        s2 = peg$parseletter()
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2)
            s2 = peg$parseletter()
          }
        } else {
          s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c32(s1)
        }
        s0 = s1

        return s0
      }

      function peg$parseletter() {
        var s0

        if (peg$c33.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c34) }
        }
        if (s0 === peg$FAILED) {
          if (peg$c35.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c36) }
          }
          if (s0 === peg$FAILED) {
            if (peg$c37.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c38) }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c39) {
                s0 = peg$c39
                peg$currPos += 2
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c40) }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c41) {
                  s0 = peg$c41
                  peg$currPos += 2
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c42) }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c43) {
                    s0 = peg$c43
                    peg$currPos += 2
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c44) }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c45) {
                      s0 = peg$c45
                      peg$currPos += 2
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c46) }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c47) {
                        s0 = peg$c47
                        peg$currPos += 2
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c48) }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c49) {
                          s0 = peg$c49
                          peg$currPos += 2
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c50) }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        return s0
      }

      function peg$parsetag() {
        var s0

        if (input.charCodeAt(peg$currPos) === 112) {
          s0 = peg$c51
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c52) }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c53) {
            s0 = peg$c53
            peg$currPos += 2
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c54) }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c55) {
              s0 = peg$c55
              peg$currPos += 2
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c56) }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c57) {
                s0 = peg$c57
                peg$currPos += 2
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c58) }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c59) {
                  s0 = peg$c59
                  peg$currPos += 2
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c60) }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c61) {
                    s0 = peg$c61
                    peg$currPos += 2
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) { peg$fail(peg$c62) }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c63) {
                      s0 = peg$c63
                      peg$currPos += 2
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) { peg$fail(peg$c64) }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 105) {
                        s0 = peg$c65
                        peg$currPos++
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) { peg$fail(peg$c66) }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c67) {
                          s0 = peg$c67
                          peg$currPos += 2
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) { peg$fail(peg$c68) }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c69) {
                            s0 = peg$c69
                            peg$currPos += 2
                          } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) { peg$fail(peg$c70) }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c71) {
                              s0 = peg$c71
                              peg$currPos += 3
                            } else {
                              s0 = peg$FAILED
                              if (peg$silentFails === 0) { peg$fail(peg$c72) }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c73) {
                                s0 = peg$c73
                                peg$currPos += 2
                              } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) { peg$fail(peg$c74) }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        return s0
      }

      function peg$parseall_delimitor() {
        var s0

        if (input.charCodeAt(peg$currPos) === 32) {
          s0 = peg$c75
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c76) }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c77
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c78) }
          }
        }

        return s0
      }

      function peg$parsespace_delimitor() {
        var s0

        if (input.charCodeAt(peg$currPos) === 32) {
          s0 = peg$c75
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c76) }
        }

        return s0
      }

      function peg$parsesemicolon() {
        var s0

        if (input.charCodeAt(peg$currPos) === 59) {
          s0 = peg$c79
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c80) }
        }

        return s0
      }

      peg$result = peg$startRuleFunction()

      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation())
        }

        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        )
      }
    }

    return {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    }
  })()
